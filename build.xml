<?xml version="1.0"?>

<project name="sitemesh" default="dist">
    <property name="lib.dir" location="lib" />
    <property name="dist.dir" location="dist" />
    <property name="docs.dir" location="docs" />
    <property name="src.dir" location="src" />
    <property name="build.dir" location="${dist.dir}/build" />

    <property file="build.properties"/>

    <!-- Classpath -->
    <path id="cp">
        <fileset dir="${lib.dir}">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <target name="pre-compile">

        <!-- Determine if lexer needs regenerating -->
        <uptodate
            property="lexer.uptodate"
            srcfile="${java.dir}/com/opensymphony/module/sitemesh/parser/html/lexer.flex"
            targetfile="${java.dir}/com/opensymphony/module/sitemesh/parser/html/Lexer.java"/>
        <antcall target="jflex"/>

        <!-- Determine if parser needs regenerating -->
        <uptodate
            property="parser.uptodate"
            srcfile="${java.dir}/com/opensymphony/module/sitemesh/parser/html/parser.yacc"
            targetfile="${java.dir}/com/opensymphony/module/sitemesh/parser/html/Parser.java"/>
        <antcall target="yacc"/>

    </target>

    <target name="jflex" unless="lexer.uptodate">
        <echo message="Generating HTML lexer using JFlex"/>
        <java classpath="${lib.dir}/jflex.jar" classname="JFlex.Main" fork="yes">
            <arg value="-d"/>
            <arg value="${java.dir}/com/opensymphony/module/sitemesh/parser/html"/>
            <arg value="${java.dir}/com/opensymphony/module/sitemesh/parser/html/lexer.flex"/>
        </java>
        <delete file="${java.dir}/com/opensymphony/module/sitemesh/parser/html/Lexer.java~"/>
    </target>

    <target name="yacc" unless="parser.uptodate">
        <property name="yacc.args" value="-Jnorun -Jnoconstruct -Jclass=Parser -Jextends=Lexer -Jsemantic=String -Jsemantic=Value -Jpackage=com.opensymphony.module.sitemesh.parser.html parser.yacc" />
        <echo message="Generating HTML parser using BYacc/J"/>
        <exec vmlauncher="false" executable="lib/yacc.exe" dir="${java.dir}/com/opensymphony/module/sitemesh/parser/html" failonerror="true"
        os="Windows NT,Windows 98,Windows 95,Windows 2000"
        >
            <arg line="${yacc.args}"/>
        </exec>
        <exec vmlauncher="false" executable="${lib.dir}/yacc.solaris" dir="${java.dir}/com/opensymphony/module/sitemesh/parser/html" failonerror="true"
        os="SunOS,Solaris"
        >
            <arg line="${yacc.args}"/>
        </exec>
        <exec vmlauncher="false" executable="${lib.dir}/yacc.linux" dir="${java.dir}/com/opensymphony/module/sitemesh/parser/html" failonerror="true"
        os="Linux"
        >
            <arg line="${yacc.args}"/>
        </exec>
        <exec vmlauncher="false" executable="${lib.dir}/yacc.osx" dir="${java.dir}/com/opensymphony/module/sitemesh/parser/html" failonerror="true"
        os="Mac OS X"
        >
            <arg line="${yacc.args}"/>
        </exec>
    </target>

    <target name="compile" depends="pre-compile">
        <mkdir dir="${build.dir}/classes"/>

        <javac destdir="${build.dir}/classes"
            classpathref="cp"
            optimize="${compile.optimize}"
            debug="${compile.debug}"
            nowarn="${compile.nowarn}"
            deprecation="${compile.deprecation}"
            >

            <src path="${java.dir}"/>

        </javac>
    </target>

    <target name="test" depends="compile" description="Run all unit tests">
        <mkdir dir="${build.dir}/test-classes"/>
        <mkdir dir="${build.dir}/test-results"/>
        <javac srcdir="${test.dir}" destdir="${build.dir}/classes" classpathref="cp" classpath="${build.dir}/classes"/>
        <taskdef name="junit" classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask" classpathref="cp"/>
        <echo message="Running unit tests..."/>
        <junit printsummary="no" haltonfailure="yes" fork="no">
            <classpath refid="cp"/>
            <classpath>
                <pathelement location="${build.dir}/classes"/>
                <pathelement location="${build.dir}/test-classes"/>
            </classpath>
            <formatter type="brief" usefile="no"/>
            <formatter type="xml"/>
            <batchtest todir="${build.dir}/test-results">
                <fileset dir="${test.dir}">
                    <include name="**/*Test.java"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="javadocs" description="Generates JavaDoc">
        <mkdir dir="${dist.dir}/docs/api"/>

        <javadoc sourcepath="${java.dir}"
            destdir="${dist.dir}/docs/api"
            stylesheetfile="${docs.dir}/api.css"
            packagenames="com.opensymphony.*"
            classpathref="cp"
            author="true"
            version="true"
            private="true"
            use="true"
            windowTitle="${Name} ${version} API"
            doctitle="${Name} ${version} API"
            footer="&lt;a href=&quot;http://www.opensymphony.com/sitemesh/&quot;&gt;www.opensymphony.com/sitemesh/&lt;/a&gt;">

            <link href="http://java.sun.com/j2se/1.4.2/docs/api/"/>
            <link href="http://java.sun.com/products/servlet/2.3/javadoc/"/>
            <link href="http://jakarta.apache.org/velocity/api/"/>
            <link href="http://jakarta.apache.org/velocity/tools/javadoc/"/>
            <link href="http://freemarker.sourceforge.net/docs/api/"/>
        </javadoc>
    </target>

    <target name="docs" depends="javadocs">
        <copy todir="${dist.dir}/docs">
            <fileset dir="${docs.dir}" excludes="*.css"/>
        </copy>

        <mkdir dir="${dist.dir}/docs/dtd"/>
        <copy todir="${dist.dir}/docs" file="README.txt"/>
        <copy todir="${dist.dir}/docs" file="CHANGES.txt"/>
        <copy todir="${dist.dir}/docs/dtd">
            <fileset dir="${etc.dir}/dtd"/>
        </copy>

        <replace dir="${dist.dir}/docs" token="@VERSION@" value="${version}"/>
    </target>

    <target name="jar" depends="compile">
        <mkdir dir="${dist.dir}"/>

        <copy todir="${build.dir}/classes/com/opensymphony/module/sitemesh/factory" file="${java.dir}/com/opensymphony/module/sitemesh/factory/sitemesh-default.xml"/>

        <jar jarfile="${dist.dir}/${name}-${version}.jar" basedir="${build.dir}/classes"
            excludes="**/servlets/**"
            >
            <metainf dir="${tld.dir}/jsp1.2" includes="*.tld"/>
        </jar>
    </target>

    <target name="blank" depends="jar" description="Builds simple web-app to get started with SiteMesh">
        <mkdir dir="${dist.dir}"/>
        <war warfile="${dist.dir}/${name}-blank.war" webxml="${blank.dir}/WEB-INF/web.xml">
            <fileset dir="${blank.dir}">
                <exclude name="WEB-INF/web.xml"/>
            </fileset>
            <lib dir="${dist.dir}">
                <include name="${name}-${version}.jar"/>
            </lib>
        </war>
    </target>

    <target name="example" depends="jar" description="Builds sample web-app">
        <!-- Temporary work-around for the Tomcat bug. Changes all html files to jsp. -->
        <mkdir dir="${build.dir}/example-temp"/>
        <copy todir="${build.dir}/example-temp">
            <fileset dir="${example.dir}"/>
        </copy>
        <move todir="${build.dir}/example-temp">
            <fileset dir="${build.dir}/example-temp"/>
        </move>

        <mkdir dir="${dist.dir}"/>

        <war warfile="${dist.dir}/${name}-example.war" webxml="${example.dir}/WEB-INF/web.xml">
            <fileset dir="${build.dir}/example-temp">
                <exclude name="WEB-INF/web.xml"/>
            </fileset>
            <lib dir="${dist.dir}">
                <include name="${name}-${version}.jar"/>
            </lib>
            <lib dir="${lib.dir}">
                <include name="commons-*.jar"/>
                <include name="velocity-*.jar"/>
                <include name="freemarker.jar"/>
                </lib>
            <lib dir="${tld.dir}">
                  <include name="sitemesh*.tld" />
                </lib>
            <classes dir="${build.dir}/classes">
                <include name="**/PathologicalServlet.class"/>
            </classes>
            <lib dir="${tld.dir}">
                  <include name="sitemesh*.tld" />
            </lib>
        </war>
    </target>

    <target name="changelog" description="Generates a changelog for the last 80 days">
        <mkdir dir="${build.dir}"/>

        <cvschangelog dir="." destfile="${build.dir}/changelog.xml" daysinpast="80">
            <user displayname="Hani Suleiman" userid="hani"/>
            <user displayname="Mathias Bogaert" userid="mbogaert"/>
            <user displayname="Scott Farquhar" userid="farkas"/>
            <user displayname="Mike Cannon-Brookes" userid="rebelutionary"/>
            <user displayname="Richard Hallier" userid="rhallier"/>
            <user displayname="Chris Miller" userid="chris_miller"/>
            <user displayname="Joe Walnes" userid="jwalnes1"/>
        </cvschangelog>

        <mkdir dir="${dist.dir}/docs"/>

        <style in="${build.dir}/changelog.xml" out="${dist.dir}/docs/changelog.html" style="${ant.home}/etc/changelog.xsl">
            <param name="title" expression="SiteMesh changelog for the last 80 days"/>
            <param name="module" expression="sitemesh"/>
            <param name="cvsweb" expression="https://sitemesh.dev.java.net/source/browse/"/>
        </style>
    </target>

    <target name="dist" depends="clean, docs, test, jar, blank, example" description="Builds distribution archives">
        <zip zipfile="${dist.dir}/${name}-${version}-sources.zip"
            basedir="${basedir}"
            excludes="${dist.dir}/**, ${build.dir}/**, **/*.log"
            />
    </target>

    <target name="clean" description="Removes all build artifacts">
        <delete dir="${build.dir}"/>
        <delete dir="${dist.dir}"/>
    </target>
</project>
